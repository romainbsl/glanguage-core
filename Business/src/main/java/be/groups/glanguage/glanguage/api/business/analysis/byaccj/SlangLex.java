/* The following code was generated by JFlex 1.4.3 on 15/09/16 16:08 */

package be.groups.glanguage.glanguage.api.business.analysis.byaccj;

import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import be.groups.glanguage.glanguage.api.business.analysis.byaccj.SlangTab;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/09/16 16:08 from the specification file
 * <tt>slang.l</tt>
 */
public class SlangLex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\43\2\0\1\46\22\0\1\46\1\0\1\41\4\0"+
    "\1\34\1\57\1\60\1\53\1\33\1\32\1\45\1\54\1\47\12\31"+
    "\1\40\1\56\1\50\1\52\1\51\1\55\1\0\1\1\1\6\1\5"+
    "\1\12\1\7\1\17\1\20\1\22\1\4\1\23\1\26\1\3\1\21"+
    "\1\11\1\10\1\2\1\44\1\15\1\16\1\13\1\14\1\25\1\44"+
    "\1\30\1\24\1\44\1\61\1\42\1\62\1\0\1\27\1\0\1\1"+
    "\1\6\1\5\1\37\1\7\1\17\1\20\1\22\1\4\1\23\1\26"+
    "\1\3\1\36\1\11\1\10\1\2\1\44\1\15\1\16\1\13\1\14"+
    "\1\25\1\44\1\30\1\35\1\44\1\63\1\0\1\64\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\23\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\1\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\5\2\1\32\1\33\6\2\1\34"+
    "\33\2\1\35\2\0\1\36\1\0\1\37\1\13\1\40"+
    "\1\41\1\42\1\43\1\2\1\44\1\45\1\46\1\47"+
    "\6\2\1\50\1\51\1\52\1\53\3\2\1\54\6\2"+
    "\1\55\2\2\1\56\4\2\1\57\1\2\1\60\1\61"+
    "\1\62\1\63\1\64\3\2\1\65\1\66\1\67\1\2"+
    "\4\0\5\2\1\70\2\2\1\71\3\2\1\72\1\73"+
    "\3\2\1\74\1\2\1\75\1\2\1\76\3\2\1\77"+
    "\1\100\1\101\12\2\1\66\1\67\1\2\1\35\4\0"+
    "\1\102\1\2\1\44\14\2\1\103\4\2\1\104\1\105"+
    "\3\2\1\61\3\2\1\106\1\2\1\107\1\0\1\2"+
    "\1\47\4\2\1\110\10\2\1\111\5\2\1\112\2\2"+
    "\1\0\2\2\1\113\1\2\1\114\1\51\1\2\1\115"+
    "\3\2\1\116\11\2\1\117\1\120\1\2\1\65\1\2"+
    "\1\121\1\2\1\53\1\54\1\122\1\123\4\2\1\57"+
    "\4\2\1\124\2\2\1\55\2\2\1\125\4\2\1\126"+
    "\2\2\1\127\2\2\1\130\7\2\1\131\2\2\1\132"+
    "\1\2\1\133\1\134\1\2\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\324\0\u0459\0\u048e"+
    "\0\65\0\u04c3\0\65\0\u04f8\0\u052d\0\65\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\65\0\65\0\u048e\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\324\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\324\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u04f8\0\65\0\u0ee8\0\65\0\u0f1d\0\65\0\65"+
    "\0\65\0\65\0\u0f52\0\u0f87\0\324\0\324\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\324\0\u112f\0\324"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\324\0\u15bd\0\324"+
    "\0\324\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\u190d\0\u1942\0\324\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\324\0\324\0\u1ab5\0\u1aea\0\u1b1f\0\324\0\u1b54"+
    "\0\324\0\u1b89\0\324\0\u1bbe\0\u1bf3\0\u1c28\0\324\0\324"+
    "\0\324\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b"+
    "\0\u1dd0\0\u1e05\0\u1e3a\0\324\0\324\0\u1e6f\0\u1ea4\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\65\0\u1f78\0\324\0\u1fad\0\u1fe2"+
    "\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a"+
    "\0\u21bf\0\u21f4\0\324\0\u2229\0\u225e\0\u2293\0\u22c8\0\324"+
    "\0\324\0\u22fd\0\u2332\0\u2367\0\324\0\u239c\0\u23d1\0\u2406"+
    "\0\324\0\u243b\0\324\0\u2470\0\u24a5\0\324\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\324\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682"+
    "\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a"+
    "\0\u285f\0\324\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\324"+
    "\0\u299d\0\324\0\324\0\u29d2\0\324\0\u2a07\0\u2a3c\0\u2a71"+
    "\0\324\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4"+
    "\0\u2c19\0\u2c4e\0\324\0\324\0\u2c83\0\324\0\u2cb8\0\324"+
    "\0\u2ced\0\324\0\324\0\324\0\324\0\u2d22\0\u2d57\0\u2d8c"+
    "\0\u2dc1\0\324\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\324\0\u2eca"+
    "\0\u2eff\0\324\0\u2f34\0\u2f69\0\324\0\u2f9e\0\u2fd3\0\u3008"+
    "\0\u303d\0\324\0\u3072\0\u30a7\0\324\0\u30dc\0\u3111\0\324"+
    "\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\324"+
    "\0\u32b9\0\u32ee\0\324\0\u3323\0\324\0\324\0\u3358\0\324";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\5\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\5\1\26\1\5"+
    "\1\27\1\30\1\31\1\32\1\25\1\22\1\14\1\33"+
    "\1\34\1\35\1\36\1\5\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\66\0\1\5\1\57\3\5"+
    "\1\60\2\5\1\61\2\5\1\62\15\5\3\0\3\5"+
    "\4\0\1\5\21\0\13\5\1\63\15\5\3\0\3\5"+
    "\4\0\1\5\21\0\31\5\3\0\3\5\4\0\1\5"+
    "\21\0\10\5\1\64\5\5\1\65\12\5\3\0\3\5"+
    "\4\0\1\5\21\0\6\5\1\66\22\5\3\0\3\5"+
    "\4\0\1\5\21\0\1\67\6\5\1\70\21\5\3\0"+
    "\3\5\4\0\1\5\21\0\2\5\1\71\5\5\1\72"+
    "\20\5\3\0\3\5\4\0\1\5\21\0\4\5\1\73"+
    "\7\5\1\74\14\5\3\0\3\5\4\0\1\5\21\0"+
    "\7\5\1\75\3\5\1\76\15\5\3\0\3\5\4\0"+
    "\1\5\21\0\1\77\5\5\1\100\4\5\1\101\15\5"+
    "\3\0\3\5\4\0\1\5\21\0\3\5\1\102\10\5"+
    "\1\103\4\5\1\104\7\5\3\0\3\5\4\0\1\5"+
    "\21\0\7\5\1\105\21\5\3\0\3\5\4\0\1\5"+
    "\21\0\3\5\1\106\2\5\1\107\3\5\1\110\1\111"+
    "\4\5\1\112\10\5\3\0\1\5\1\112\1\5\4\0"+
    "\1\5\21\0\1\113\1\5\1\114\3\5\1\115\1\116"+
    "\21\5\3\0\3\5\4\0\1\5\21\0\6\5\1\117"+
    "\22\5\3\0\3\5\4\0\1\5\21\0\1\120\2\5"+
    "\1\121\3\5\1\122\3\5\1\123\15\5\3\0\3\5"+
    "\4\0\1\5\21\0\7\5\1\124\21\5\3\0\3\5"+
    "\4\0\1\5\21\0\1\125\12\5\1\126\15\5\3\0"+
    "\3\5\4\0\1\5\21\0\6\5\1\127\22\5\3\0"+
    "\3\5\4\0\1\5\51\0\1\27\1\130\21\0\1\130"+
    "\41\0\1\130\64\0\1\131\33\0\41\132\1\133\1\134"+
    "\22\132\42\0\1\135\67\0\1\136\65\0\1\40\65\0"+
    "\1\137\2\0\1\140\63\0\1\140\1\141\64\0\1\142"+
    "\13\0\1\5\1\143\12\5\1\144\14\5\3\0\3\5"+
    "\4\0\1\5\21\0\15\5\1\145\13\5\3\0\3\5"+
    "\4\0\1\5\21\0\11\5\1\146\17\5\3\0\2\5"+
    "\1\146\4\0\1\5\21\0\17\5\1\147\11\5\3\0"+
    "\3\5\4\0\1\5\21\0\12\5\1\150\16\5\3\0"+
    "\3\5\4\0\1\5\21\0\12\5\1\151\16\5\3\0"+
    "\3\5\4\0\1\5\21\0\3\5\1\152\25\5\3\0"+
    "\3\5\4\0\1\5\21\0\10\5\1\153\20\5\3\0"+
    "\3\5\4\0\1\5\21\0\7\5\1\154\21\5\3\0"+
    "\3\5\4\0\1\5\21\0\15\5\1\155\13\5\3\0"+
    "\3\5\4\0\1\5\21\0\11\5\1\156\17\5\3\0"+
    "\2\5\1\156\4\0\1\5\21\0\12\5\1\157\16\5"+
    "\3\0\3\5\4\0\1\5\21\0\12\5\1\160\11\5"+
    "\1\161\4\5\3\0\3\5\4\0\1\5\21\0\20\5"+
    "\1\162\10\5\3\0\1\5\1\162\1\5\4\0\1\5"+
    "\21\0\12\5\1\163\10\5\1\164\5\5\3\0\1\164"+
    "\2\5\4\0\1\5\21\0\4\5\1\165\24\5\3\0"+
    "\3\5\4\0\1\5\21\0\14\5\1\166\14\5\3\0"+
    "\3\5\4\0\1\5\21\0\20\5\1\167\10\5\3\0"+
    "\1\5\1\167\1\5\4\0\1\5\21\0\13\5\1\170"+
    "\15\5\3\0\3\5\4\0\1\5\21\0\6\5\1\171"+
    "\22\5\3\0\3\5\4\0\1\5\21\0\13\5\1\172"+
    "\15\5\3\0\3\5\4\0\1\5\21\0\17\5\1\173"+
    "\11\5\3\0\3\5\4\0\1\5\21\0\1\5\1\174"+
    "\27\5\3\0\3\5\4\0\1\5\21\0\14\5\1\175"+
    "\14\5\3\0\3\5\4\0\1\5\21\0\5\5\1\176"+
    "\12\5\1\177\10\5\3\0\1\5\1\177\1\5\4\0"+
    "\1\5\21\0\1\200\2\5\1\201\25\5\3\0\3\5"+
    "\4\0\1\5\21\0\2\5\1\202\26\5\3\0\3\5"+
    "\4\0\1\5\21\0\7\5\1\203\21\5\3\0\3\5"+
    "\4\0\1\5\21\0\5\5\1\204\23\5\3\0\3\5"+
    "\4\0\1\5\21\0\14\5\1\205\14\5\3\0\3\5"+
    "\4\0\1\5\21\0\12\5\1\206\16\5\3\0\3\5"+
    "\4\0\1\5\21\0\14\5\1\207\6\5\1\210\3\5"+
    "\1\211\1\5\3\0\1\210\2\5\4\0\1\5\21\0"+
    "\10\5\1\212\20\5\3\0\3\5\4\0\1\5\21\0"+
    "\10\5\1\213\20\5\3\0\3\5\4\0\1\5\21\0"+
    "\2\5\1\214\26\5\3\0\3\5\4\0\1\5\21\0"+
    "\13\5\1\215\15\5\3\0\3\5\4\0\1\5\21\0"+
    "\10\5\1\216\20\5\3\0\3\5\4\0\1\5\21\0"+
    "\2\5\1\217\5\5\1\220\20\5\3\0\3\5\4\0"+
    "\1\5\21\0\1\221\30\5\3\0\3\5\4\0\1\5"+
    "\27\0\1\222\21\0\1\130\64\0\1\131\3\0\1\223"+
    "\1\224\1\225\25\0\43\132\1\0\21\132\43\136\1\0"+
    "\21\136\1\0\2\5\1\226\26\5\3\0\3\5\4\0"+
    "\1\5\21\0\3\5\1\227\25\5\3\0\3\5\4\0"+
    "\1\5\21\0\13\5\1\230\15\5\3\0\3\5\4\0"+
    "\1\5\21\0\26\5\1\231\2\5\3\0\3\5\4\0"+
    "\1\5\21\0\6\5\1\232\22\5\3\0\3\5\4\0"+
    "\1\5\21\0\2\5\1\233\26\5\3\0\3\5\4\0"+
    "\1\5\21\0\25\5\1\234\3\5\3\0\3\5\4\0"+
    "\1\5\21\0\2\5\1\235\26\5\3\0\3\5\4\0"+
    "\1\5\21\0\6\5\1\236\22\5\3\0\3\5\4\0"+
    "\1\5\21\0\7\5\1\237\21\5\3\0\3\5\4\0"+
    "\1\5\21\0\6\5\1\240\22\5\3\0\3\5\4\0"+
    "\1\5\21\0\6\5\1\241\22\5\3\0\3\5\4\0"+
    "\1\5\21\0\6\5\1\242\22\5\3\0\3\5\4\0"+
    "\1\5\21\0\15\5\1\243\13\5\3\0\3\5\4\0"+
    "\1\5\21\0\6\5\1\244\22\5\3\0\3\5\4\0"+
    "\1\5\21\0\1\245\30\5\3\0\3\5\4\0\1\5"+
    "\21\0\6\5\1\246\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\6\5\1\247\1\5\1\250\20\5\3\0\3\5"+
    "\4\0\1\5\21\0\10\5\1\251\20\5\3\0\3\5"+
    "\4\0\1\5\21\0\10\5\1\252\20\5\3\0\3\5"+
    "\4\0\1\5\21\0\10\5\1\253\20\5\3\0\3\5"+
    "\4\0\1\5\21\0\12\5\1\254\16\5\3\0\3\5"+
    "\4\0\1\5\21\0\3\5\1\255\25\5\3\0\3\5"+
    "\4\0\1\5\21\0\15\5\1\256\13\5\3\0\3\5"+
    "\4\0\1\5\21\0\24\5\1\257\4\5\3\0\3\5"+
    "\4\0\1\5\21\0\27\5\1\260\1\5\3\0\3\5"+
    "\4\0\1\5\21\0\10\5\1\261\20\5\3\0\3\5"+
    "\4\0\1\5\21\0\15\5\1\262\13\5\3\0\3\5"+
    "\4\0\1\5\21\0\7\5\1\263\21\5\3\0\3\5"+
    "\4\0\1\5\21\0\14\5\1\264\14\5\3\0\3\5"+
    "\4\0\1\5\21\0\20\5\1\265\10\5\3\0\1\5"+
    "\1\265\1\5\4\0\1\5\21\0\4\5\1\266\24\5"+
    "\3\0\3\5\4\0\1\5\21\0\13\5\1\267\15\5"+
    "\3\0\3\5\4\0\1\5\21\0\12\5\1\270\16\5"+
    "\3\0\3\5\4\0\1\5\21\0\12\5\1\271\16\5"+
    "\3\0\3\5\4\0\1\5\21\0\14\5\1\272\14\5"+
    "\3\0\3\5\4\0\1\5\21\0\13\5\1\273\15\5"+
    "\3\0\3\5\4\0\1\5\21\0\23\5\1\274\5\5"+
    "\3\0\1\274\2\5\4\0\1\5\21\0\6\5\1\275"+
    "\22\5\3\0\3\5\4\0\1\5\21\0\14\5\1\276"+
    "\14\5\3\0\3\5\4\0\1\5\51\0\1\277\1\0"+
    "\1\300\11\0\1\300\50\0\1\301\64\0\1\302\64\0"+
    "\1\303\2\0\1\304\31\0\3\5\1\305\25\5\3\0"+
    "\3\5\4\0\1\5\21\0\2\5\1\306\26\5\3\0"+
    "\3\5\4\0\1\5\21\0\15\5\1\307\13\5\3\0"+
    "\3\5\4\0\1\5\21\0\12\5\1\310\16\5\3\0"+
    "\3\5\4\0\1\5\21\0\17\5\1\311\11\5\3\0"+
    "\3\5\4\0\1\5\21\0\6\5\1\312\22\5\3\0"+
    "\3\5\4\0\1\5\21\0\6\5\1\313\22\5\3\0"+
    "\3\5\4\0\1\5\21\0\3\5\1\314\25\5\3\0"+
    "\3\5\4\0\1\5\21\0\5\5\1\315\23\5\3\0"+
    "\3\5\4\0\1\5\21\0\20\5\1\316\10\5\3\0"+
    "\1\5\1\316\1\5\4\0\1\5\21\0\14\5\1\317"+
    "\14\5\3\0\3\5\4\0\1\5\21\0\20\5\1\320"+
    "\10\5\3\0\1\5\1\320\1\5\4\0\1\5\21\0"+
    "\12\5\1\321\16\5\3\0\3\5\4\0\1\5\21\0"+
    "\15\5\1\322\13\5\3\0\3\5\4\0\1\5\21\0"+
    "\4\5\1\323\24\5\3\0\3\5\4\0\1\5\21\0"+
    "\11\5\1\324\17\5\3\0\2\5\1\324\4\0\1\5"+
    "\21\0\6\5\1\325\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\10\5\1\326\20\5\3\0\3\5\4\0\1\5"+
    "\21\0\12\5\1\327\16\5\3\0\3\5\4\0\1\5"+
    "\21\0\6\5\1\330\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\14\5\1\331\14\5\3\0\3\5\4\0\1\5"+
    "\21\0\13\5\1\332\15\5\3\0\3\5\4\0\1\5"+
    "\21\0\1\333\12\5\1\334\15\5\3\0\3\5\4\0"+
    "\1\5\21\0\21\5\1\335\7\5\3\0\3\5\4\0"+
    "\1\5\21\0\12\5\1\336\16\5\3\0\3\5\4\0"+
    "\1\5\21\0\21\5\1\337\7\5\3\0\3\5\4\0"+
    "\1\5\21\0\3\5\1\340\25\5\3\0\3\5\4\0"+
    "\1\5\21\0\15\5\1\341\13\5\3\0\3\5\4\0"+
    "\1\5\21\0\1\342\30\5\3\0\3\5\4\0\1\5"+
    "\21\0\15\5\1\343\13\5\3\0\3\5\4\0\1\5"+
    "\51\0\1\277\64\0\1\301\4\0\1\224\1\225\56\0"+
    "\1\302\5\0\1\225\56\0\1\303\6\0\1\344\25\0"+
    "\4\5\1\345\24\5\3\0\3\5\4\0\1\5\21\0"+
    "\12\5\1\346\16\5\3\0\3\5\4\0\1\5\21\0"+
    "\6\5\1\347\22\5\3\0\3\5\4\0\1\5\21\0"+
    "\6\5\1\350\22\5\3\0\3\5\4\0\1\5\21\0"+
    "\14\5\1\351\14\5\3\0\3\5\4\0\1\5\21\0"+
    "\1\352\30\5\3\0\3\5\4\0\1\5\21\0\16\5"+
    "\1\353\12\5\3\0\3\5\4\0\1\5\21\0\6\5"+
    "\1\354\22\5\3\0\3\5\4\0\1\5\21\0\5\5"+
    "\1\355\23\5\3\0\3\5\4\0\1\5\21\0\3\5"+
    "\1\356\25\5\3\0\3\5\4\0\1\5\21\0\5\5"+
    "\1\357\23\5\3\0\3\5\4\0\1\5\21\0\3\5"+
    "\1\360\25\5\3\0\3\5\4\0\1\5\21\0\1\5"+
    "\1\361\27\5\3\0\3\5\4\0\1\5\21\0\6\5"+
    "\1\362\22\5\3\0\3\5\4\0\1\5\21\0\20\5"+
    "\1\363\10\5\3\0\1\5\1\363\1\5\4\0\1\5"+
    "\21\0\17\5\1\364\11\5\3\0\3\5\4\0\1\5"+
    "\21\0\14\5\1\365\14\5\3\0\3\5\4\0\1\5"+
    "\21\0\1\366\30\5\3\0\3\5\4\0\1\5\21\0"+
    "\12\5\1\367\16\5\3\0\3\5\4\0\1\5\21\0"+
    "\2\5\1\370\26\5\3\0\3\5\4\0\1\5\21\0"+
    "\6\5\1\371\22\5\3\0\3\5\4\0\1\5\21\0"+
    "\15\5\1\372\13\5\3\0\3\5\4\0\1\5\21\0"+
    "\1\5\1\373\27\5\3\0\3\5\4\0\1\5\21\0"+
    "\14\5\1\374\14\5\3\0\3\5\4\0\1\5\51\0"+
    "\1\375\34\0\1\376\30\5\3\0\3\5\4\0\1\5"+
    "\21\0\27\5\1\377\1\5\3\0\3\5\4\0\1\5"+
    "\21\0\14\5\1\u0100\14\5\3\0\3\5\4\0\1\5"+
    "\21\0\15\5\1\u0101\13\5\3\0\3\5\4\0\1\5"+
    "\21\0\10\5\1\u0102\20\5\3\0\3\5\4\0\1\5"+
    "\21\0\14\5\1\u0103\14\5\3\0\3\5\4\0\1\5"+
    "\21\0\6\5\1\u0104\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\4\5\1\u0105\24\5\3\0\3\5\4\0\1\5"+
    "\21\0\6\5\1\u0106\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\7\5\1\u0107\21\5\3\0\3\5\4\0\1\5"+
    "\21\0\1\u0108\30\5\3\0\3\5\4\0\1\5\21\0"+
    "\11\5\1\u0109\17\5\3\0\2\5\1\u0109\4\0\1\5"+
    "\21\0\5\5\1\u010a\23\5\3\0\3\5\4\0\1\5"+
    "\21\0\2\5\1\u010b\1\u010c\25\5\3\0\3\5\4\0"+
    "\1\5\21\0\3\5\1\u010d\25\5\3\0\3\5\4\0"+
    "\1\5\21\0\14\5\1\u010e\14\5\3\0\3\5\4\0"+
    "\1\5\21\0\3\5\1\u010f\4\5\1\u0110\1\u0111\3\5"+
    "\1\u0112\13\5\3\0\2\5\1\u0111\4\0\1\5\21\0"+
    "\1\u0113\30\5\3\0\3\5\4\0\1\5\21\0\15\5"+
    "\1\u0114\13\5\3\0\3\5\4\0\1\5\21\0\2\5"+
    "\1\u0115\26\5\3\0\3\5\4\0\1\5\21\0\23\5"+
    "\1\u0116\5\5\3\0\1\u0116\2\5\4\0\1\5\51\0"+
    "\1\375\2\0\1\304\31\0\5\5\1\u0117\23\5\3\0"+
    "\3\5\4\0\1\5\21\0\12\5\1\u0118\16\5\3\0"+
    "\3\5\4\0\1\5\21\0\26\5\1\u0119\2\5\3\0"+
    "\3\5\4\0\1\5\21\0\14\5\1\u011a\14\5\3\0"+
    "\3\5\4\0\1\5\21\0\14\5\1\u011b\14\5\3\0"+
    "\3\5\4\0\1\5\21\0\10\5\1\u011c\20\5\3\0"+
    "\3\5\4\0\1\5\21\0\10\5\1\u011d\20\5\3\0"+
    "\3\5\4\0\1\5\21\0\6\5\1\u011e\22\5\3\0"+
    "\3\5\4\0\1\5\21\0\6\5\1\u011f\22\5\3\0"+
    "\3\5\4\0\1\5\21\0\12\5\1\u0120\16\5\3\0"+
    "\3\5\4\0\1\5\21\0\10\5\1\u0121\20\5\3\0"+
    "\3\5\4\0\1\5\21\0\23\5\1\u0122\5\5\3\0"+
    "\1\u0122\2\5\4\0\1\5\21\0\10\5\1\u0123\20\5"+
    "\3\0\3\5\4\0\1\5\21\0\13\5\1\u0124\15\5"+
    "\3\0\3\5\4\0\1\5\21\0\1\u0125\30\5\3\0"+
    "\3\5\4\0\1\5\21\0\12\5\1\u0126\16\5\3\0"+
    "\3\5\4\0\1\5\21\0\23\5\1\u0127\5\5\3\0"+
    "\1\u0127\2\5\4\0\1\5\21\0\2\5\1\u0128\26\5"+
    "\3\0\3\5\4\0\1\5\21\0\14\5\1\u0129\14\5"+
    "\3\0\3\5\4\0\1\5\21\0\14\5\1\u012a\14\5"+
    "\3\0\3\5\4\0\1\5\21\0\10\5\1\u012b\20\5"+
    "\3\0\3\5\4\0\1\5\21\0\6\5\1\u012c\22\5"+
    "\3\0\3\5\4\0\1\5\21\0\17\5\1\u012d\11\5"+
    "\3\0\3\5\4\0\1\5\21\0\12\5\1\u012e\16\5"+
    "\3\0\3\5\4\0\1\5\21\0\20\5\1\u012f\10\5"+
    "\3\0\1\5\1\u012f\1\5\4\0\1\5\21\0\12\5"+
    "\1\u0130\16\5\3\0\3\5\4\0\1\5\21\0\14\5"+
    "\1\u0131\14\5\3\0\3\5\4\0\1\5\21\0\6\5"+
    "\1\u0132\22\5\3\0\3\5\4\0\1\5\21\0\7\5"+
    "\1\u0133\21\5\3\0\3\5\4\0\1\5\21\0\17\5"+
    "\1\u0134\11\5\3\0\3\5\4\0\1\5\21\0\20\5"+
    "\1\u0135\10\5\3\0\1\5\1\u0135\1\5\4\0\1\5"+
    "\21\0\6\5\1\u0136\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\6\5\1\u0137\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\6\5\1\u0138\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\3\5\1\u0139\25\5\3\0\3\5\4\0\1\5"+
    "\21\0\13\5\1\u013a\15\5\3\0\3\5\4\0\1\5"+
    "\21\0\12\5\1\u013b\16\5\3\0\3\5\4\0\1\5"+
    "\21\0\17\5\1\u013c\11\5\3\0\3\5\4\0\1\5"+
    "\21\0\14\5\1\u013d\14\5\3\0\3\5\4\0\1\5"+
    "\21\0\10\5\1\u013e\20\5\3\0\3\5\4\0\1\5"+
    "\21\0\10\5\1\u013f\20\5\3\0\3\5\4\0\1\5"+
    "\21\0\21\5\1\u0140\7\5\3\0\3\5\4\0\1\5"+
    "\21\0\6\5\1\u0141\22\5\3\0\3\5\4\0\1\5"+
    "\21\0\3\5\1\u0142\25\5\3\0\3\5\4\0\1\5"+
    "\21\0\17\5\1\u0143\11\5\3\0\3\5\4\0\1\5"+
    "\21\0\11\5\1\u0144\17\5\3\0\2\5\1\u0144\4\0"+
    "\1\5\21\0\14\5\1\u0145\14\5\3\0\3\5\4\0"+
    "\1\5\21\0\4\5\1\u0146\24\5\3\0\3\5\4\0"+
    "\1\5\21\0\6\5\1\u0147\22\5\3\0\3\5\4\0"+
    "\1\5\21\0\11\5\1\u0148\17\5\3\0\2\5\1\u0148"+
    "\4\0\1\5\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13197];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\1\11\1\1\1\11\2\1\1\11"+
    "\5\1\2\11\1\1\10\11\52\1\2\0\1\11\1\0"+
    "\1\11\1\1\4\11\57\1\4\0\52\1\4\0\1\11"+
    "\37\1\1\0\30\1\1\0\113\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public String yylval;

	private int cptEnd = 0;
	
	public void set_yylval(String val){
    		yylval = val;
	}

	/** 
	 * Initialize the lexer 
	 */	
	public void initializeLex() {
		lineNumber = 1;
	}

	/** 
	  * Set token
	  *
	  * @param t The token to set
	  */
	public void setToken (int t){
		token = t;
	}

	/**
	  * Considers the special character '\' and return converted String
	  * A \" sequence is connverted to "
      *
	  * @param s The String to convert
	 */
	public String unescape (String s){
	    assert (s != null);
		int i;
        i = 0;
		StringBuilder result = new StringBuilder(s.length());
		while (i < s.length()) {
			if (s.charAt(i) == '\\' && i < s.length() - 1) {
				result.append (s.charAt(i+1));
				i = i + 1;
			}
			else {
				result.append (s.charAt(i));
			}
			i = i + 1;
		}
		return result.toString();
	}

	public String unquotedString (String s){
	    assert (s != null && s.length() >= 2 && s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"');
		return s.substring(1, s.length() - 1);
	}

	/**
	  * Number of scanned lines 
	  */
	public int lineNumber;

	/**
	  * Recognized terminal 
	  */
	public int token;

	/**
	  * Temp String for operations for operation on a String by a function of the scanner
	  */
	private String tmpStr;
	
	public void setFormulaString(String s) {
		try {
			this.zzReader = new StringReader(s);				
		} catch (Exception e) {
			Logger.getLogger(SlangLex.class.getName()).log(Level.SEVERE, null, e);
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SlangLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SlangLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 84: 
          { setToken (SlangTab.T_MULTIPLY);return token;
          }
        case 94: break;
        case 63: 
          { setToken (SlangTab.T_SUMV);return token;
          }
        case 95: break;
        case 54: 
          { setToken (SlangTab.T_JULY);return token;
          }
        case 96: break;
        case 85: 
          { setToken (SlangTab.T_SUBSTRING);return token;
          }
        case 97: break;
        case 74: 
          { setToken (SlangTab.T_MONTHS);return token;
          }
        case 98: break;
        case 66: 
          { set_yylval (yytext()); setToken (SlangTab.V_DURATION);
			//System.out.println("x_duration found");
			return token;
          }
        case 99: break;
        case 55: 
          { setToken (SlangTab.T_JUNE);return token;
          }
        case 100: break;
        case 44: 
          { setToken (SlangTab.T_DECEMBER);return token;
          }
        case 101: break;
        case 56: 
          { setToken (SlangTab.T_CEIL);return token;
          }
        case 102: break;
        case 42: 
          { setToken (SlangTab.T_NOT);return token;
          }
        case 103: break;
        case 27: 
          { setToken (SlangTab.T_IF);return token;
          }
        case 104: break;
        case 46: 
          { setToken (SlangTab.T_SUM);return token;
          }
        case 105: break;
        case 91: 
          { setToken (SlangTab.T_FORMATINTEGER);return token;
          }
        case 106: break;
        case 83: 
          { setToken (SlangTab.T_TIMESPAN);return token;
          }
        case 107: break;
        case 53: 
          { setToken (SlangTab.T_JANUARY);return token;
          }
        case 108: break;
        case 4: 
          { set_yylval (yytext()); setToken (SlangTab.V_INTEGER);
			//System.out.println("x_integer found");
			return token;
          }
        case 109: break;
        case 28: 
          { setToken (SlangTab.T_OR);return token;
          }
        case 110: break;
        case 3: 
          { setToken ('_');return token;
          }
        case 111: break;
        case 23: 
          { setToken(']');return token;
          }
        case 112: break;
        case 25: 
          { setToken('}');return token;
          }
        case 113: break;
        case 6: 
          { setToken ('+');return token;
          }
        case 114: break;
        case 7: 
          { setToken('\'');return token;
          }
        case 115: break;
        case 81: 
          { setToken (SlangTab.T_PUT_TEXT);return token;
          }
        case 116: break;
        case 57: 
          { setToken (SlangTab.T_ELSE);return token;
          }
        case 117: break;
        case 14: 
          { setToken ('>');return token;
          }
        case 118: break;
        case 82: 
          { setToken (SlangTab.T_DURATION);return token;
          }
        case 119: break;
        case 88: 
          { setToken (SlangTab.T_FORMATDATE);return token;
          }
        case 120: break;
        case 49: 
          { setToken (SlangTab.T_MARCH);return token;
          }
        case 121: break;
        case 37: 
          { setToken (SlangTab.T_ABS);return token;
          }
        case 122: break;
        case 34: 
          { setToken (SlangTab.T_SMALLER_EQ);return token;
          }
        case 123: break;
        case 87: 
          { setToken (SlangTab.T_STRINGITEM);return token;
          }
        case 124: break;
        case 21: 
          { setToken(')');return token;
          }
        case 125: break;
        case 86: 
          { setToken (SlangTab.T_APPLIC);return token;
          }
        case 126: break;
        case 50: 
          { setToken (SlangTab.T_MAY);return token;
          }
        case 127: break;
        case 71: 
          { setToken (SlangTab.T_YEARS);return token;
          }
        case 128: break;
        case 12: 
          { setToken('/');return token;
          }
        case 129: break;
        case 67: 
          { setToken (SlangTab.T_TRUNC);return token;
          }
        case 130: break;
        case 93: 
          { setToken (SlangTab.T_BANKERS_ROUNDED);return token;
          }
        case 131: break;
        case 33: 
          { setToken (SlangTab.T_DIFFERENT);return token;
          }
        case 132: break;
        case 76: 
          { setToken (SlangTab.T_BOOLEAN);return token;
          }
        case 133: break;
        case 80: 
          { setToken (SlangTab.T_MINUTES);return token;
          }
        case 134: break;
        case 16: 
          { setToken ('*');return token;
          }
        case 135: break;
        case 68: 
          { setToken (SlangTab.T_FALSE);return token;
          }
        case 136: break;
        case 89: 
          { setToken (SlangTab.T_STRINGLENGTH);return token;
          }
        case 137: break;
        case 61: 
          { setToken (SlangTab.T_THEN);return token;
          }
        case 138: break;
        case 64: 
          { setToken (SlangTab.T_SMAX);return token;
          }
        case 139: break;
        case 15: 
          { setToken ('=');return token;
          }
        case 140: break;
        case 43: 
          { setToken (SlangTab.T_NOVEMBER);return token;
          }
        case 141: break;
        case 69: 
          { setToken (SlangTab.T_FLOOR);return token;
          }
        case 142: break;
        case 24: 
          { setToken('{');return token;
          }
        case 143: break;
        case 79: 
          { setToken (SlangTab.T_FORMULA);return token;
          }
        case 144: break;
        case 20: 
          { setToken('(');return token;
          }
        case 145: break;
        case 59: 
          { setToken (SlangTab.T_DAYS);return token;
          }
        case 146: break;
        case 9: 
          { lineNumber = lineNumber + 1;
          }
        case 147: break;
        case 51: 
          { setToken (SlangTab.T_MAX);return token;
          }
        case 148: break;
        case 62: 
          { setToken (SlangTab.T_SIGN);return token;
          }
        case 149: break;
        case 2: 
          { set_yylval (yytext()); setToken (SlangTab.V_IDENT);
			//System.out.println("v_ident found "+yytext());
			return token;
          }
        case 150: break;
        case 73: 
          { setToken (SlangTab.T_STRING);return token;
          }
        case 151: break;
        case 45: 
          { setToken (SlangTab.T_SEPTEMBER);return token;
          }
        case 152: break;
        case 40: 
          { setToken (SlangTab.T_END);return token;
          }
        case 153: break;
        case 22: 
          { setToken('[');return token;
          }
        case 154: break;
        case 75: 
          { setToken (SlangTab.T_INTEGER);return token;
          }
        case 155: break;
        case 77: 
          { setToken (SlangTab.T_NUMERIC);return token;
          }
        case 156: break;
        case 32: 
          { setToken (SlangTab.T_INTEGER_DIV);return token;
          }
        case 157: break;
        case 8: 
          { setToken(':');return token;
          }
        case 158: break;
        case 13: 
          { setToken ('<');return token;
          }
        case 159: break;
        case 58: 
          { setToken (SlangTab.T_DATE);return token;
          }
        case 160: break;
        case 39: 
          { setToken (SlangTab.T_AUGUST);return token;
          }
        case 161: break;
        case 48: 
          { setToken (SlangTab.T_GET);return token;
          }
        case 162: break;
        case 47: 
          { setToken (SlangTab.T_FEBRUARY);return token;
          }
        case 163: break;
        case 19: 
          { setToken(SlangTab.T_SEP);return token;
          }
        case 164: break;
        case 11: 
          { break;
          }
        case 165: break;
        case 17: 
          { setToken ('.');return token;
          }
        case 166: break;
        case 26: 
          { setToken (SlangTab.T_IN);return token;
          }
        case 167: break;
        case 90: 
          { setToken (SlangTab.T_FORMATSTRING);return token;
          }
        case 168: break;
        case 65: 
          { setToken (SlangTab.T_SMIN);return token;
          }
        case 169: break;
        case 31: 
          { setToken (SlangTab.T_MODULO);return token;
          }
        case 170: break;
        case 5: 
          { setToken(',');return token;
          }
        case 171: break;
        case 1: 
          { setToken (SlangTab.T_UNKNOWN);
			//System.out.println(". found");
			return token;
          }
        case 172: break;
        case 78: 
          { setToken (SlangTab.T_ROUNDED);return token;
          }
        case 173: break;
        case 41: 
          { setToken (SlangTab.T_OCTOBER);return token;
          }
        case 174: break;
        case 18: 
          { setToken('?');return token;
          }
        case 175: break;
        case 52: 
          { setToken (SlangTab.T_MIN);return token;
          }
        case 176: break;
        case 60: 
          { setToken (SlangTab.T_TRUE);return token;
          }
        case 177: break;
        case 72: 
          { setToken (SlangTab.T_ELSEIF);return token;
          }
        case 178: break;
        case 10: 
          { setToken ('-');return token;
          }
        case 179: break;
        case 38: 
          { setToken (SlangTab.T_AND);return token;
          }
        case 180: break;
        case 36: 
          { setToken (SlangTab.T_APRIL);return token;
          }
        case 181: break;
        case 29: 
          { tmpStr = yytext();
				tmpStr = tmpStr.replace(',', '.');
				set_yylval (tmpStr);
				setToken (SlangTab.V_QUANTITY);
				//System.out.println("x_quantity found");
				return token;
          }
        case 182: break;
        case 30: 
          { //System.out.println("x_string found ");
			//System.out.println(unescape (unquotedString (yytext())));
			set_yylval (unescape (unquotedString (yytext())));
			setToken (SlangTab.V_STRING);
			Matcher matcher = Pattern.compile(Pattern.quote("\n")).matcher(yytext());
	        int occur = 0;
	        while (matcher.find()) {
	            occur++;
	        }
	        lineNumber = lineNumber + occur;
			//System.out.println("----------------------------- NUMERO DE LIGNE LUE (String): "+lineNumber);
			return token;
          }
        case 183: break;
        case 70: 
          { setToken (SlangTab.T_HOURS);return token;
          }
        case 184: break;
        case 92: 
          { setToken (SlangTab.T_FORMATNUMERIC);return token;
          }
        case 185: break;
        case 35: 
          { setToken (SlangTab.T_GREATER_EQ);return token;
          }
        case 186: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                if(cptEnd==0){
				//System.out.println("eof found");
				setToken(SlangTab.T_EOF);
				cptEnd++;
				return token;
			}else {
				setToken(0);
				return token;
			}
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
