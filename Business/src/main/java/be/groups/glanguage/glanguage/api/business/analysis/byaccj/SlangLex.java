/* The following code was generated by JFlex 1.4.3 on 16/09/16 14:56 */

package be.groups.glanguage.glanguage.api.business.analysis.byaccj;

import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/09/16 14:56 from the specification file
 * <tt>slang.l</tt>
 */
public class SlangLex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\51\1\43\2\0\1\51\22\0\1\51\1\0\1\45\4\0"+
    "\1\34\1\63\1\64\1\56\1\33\1\32\1\50\1\57\1\52\12\31"+
    "\1\60\1\62\1\53\1\55\1\54\1\61\1\0\1\1\1\6\1\5"+
    "\1\40\1\7\1\17\1\20\1\42\1\4\1\23\1\26\1\3\1\37"+
    "\1\11\1\10\1\35\1\47\1\15\1\44\1\41\1\14\1\25\1\47"+
    "\1\30\1\36\1\47\1\65\1\46\1\66\1\0\1\27\1\0\1\1"+
    "\1\6\1\5\1\12\1\7\1\17\1\20\1\22\1\4\1\23\1\26"+
    "\1\3\1\21\1\11\1\10\1\2\1\47\1\15\1\16\1\13\1\14"+
    "\1\25\1\47\1\30\1\24\1\47\1\67\1\0\1\70\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\23\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\1\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\5\2\1\32\1\33\6\2\1\34"+
    "\33\2\1\35\2\0\1\36\1\0\1\37\1\12\1\40"+
    "\1\41\1\42\1\43\1\2\1\44\1\45\1\46\1\47"+
    "\6\2\1\50\1\51\1\52\1\53\3\2\1\54\6\2"+
    "\1\55\2\2\1\56\4\2\1\57\1\2\1\60\1\61"+
    "\1\62\1\63\1\64\3\2\1\65\1\66\1\67\1\2"+
    "\2\0\1\70\1\0\5\2\1\71\2\2\1\72\3\2"+
    "\1\73\1\74\3\2\1\75\1\2\1\76\1\2\1\77"+
    "\3\2\1\100\1\101\1\102\12\2\1\66\1\67\1\2"+
    "\1\35\5\0\1\2\1\44\14\2\1\103\4\2\1\104"+
    "\1\105\3\2\1\61\3\2\1\106\1\2\1\107\6\0"+
    "\1\2\1\47\4\2\1\110\10\2\1\111\5\2\1\112"+
    "\2\2\3\0\2\2\1\113\1\2\1\114\1\51\1\2"+
    "\1\115\3\2\1\116\11\2\1\117\1\120\1\2\1\65"+
    "\1\0\1\2\1\121\1\2\1\53\1\54\1\122\1\123"+
    "\4\2\1\57\4\2\1\124\2\2\1\55\2\2\1\125"+
    "\4\2\1\126\2\2\1\127\2\2\1\130\7\2\1\131"+
    "\2\2\1\132\1\2\1\133\1\134\1\2\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\344\0\u04ad\0\u04e6"+
    "\0\71\0\u051f\0\71\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\71\0\71\0\u04e6\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\u06e7\0\u0720"+
    "\0\u0759\0\u0792\0\u07cb\0\u0804\0\344\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\344\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u0558\0\71\0\u1008\0\71\0\u1041\0\71\0\71"+
    "\0\71\0\71\0\u107a\0\u10b3\0\344\0\344\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\344\0\u127b\0\344"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\344\0\u1761\0\344"+
    "\0\344\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u199b\0\71\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\344\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\344\0\344\0\u1c80\0\u1cb9\0\u1cf2\0\344\0\u1d2b"+
    "\0\344\0\u1d64\0\344\0\u1d9d\0\u1dd6\0\u1e0f\0\344\0\344"+
    "\0\344\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\344\0\344\0\u2082\0\u20bb\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\344\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\344\0\u24bd\0\u24f6\0\u252f\0\u2568\0\344"+
    "\0\344\0\u25a1\0\u25da\0\u2613\0\344\0\u264c\0\u2685\0\u26be"+
    "\0\344\0\u26f7\0\344\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u2886\0\344\0\u28bf\0\u28f8\0\u2931\0\u296a\0\344"+
    "\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32"+
    "\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\344\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\344\0\u2e50"+
    "\0\344\0\344\0\u2e89\0\344\0\u2ec2\0\u2efb\0\u2f34\0\344"+
    "\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc"+
    "\0\u3135\0\344\0\344\0\u316e\0\344\0\u31a7\0\u31e0\0\344"+
    "\0\u3219\0\344\0\344\0\344\0\344\0\u3252\0\u328b\0\u32c4"+
    "\0\u32fd\0\344\0\u3336\0\u336f\0\u33a8\0\u33e1\0\344\0\u341a"+
    "\0\u3453\0\344\0\u348c\0\u34c5\0\344\0\u34fe\0\u3537\0\u3570"+
    "\0\u35a9\0\344\0\u35e2\0\u361b\0\344\0\u3654\0\u368d\0\344"+
    "\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\344"+
    "\0\u3855\0\u388e\0\344\0\u38c7\0\344\0\344\0\u3900\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\5\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\5\1\26\1\5"+
    "\1\27\1\30\1\31\1\32\1\4\1\25\1\22\1\14"+
    "\1\15\1\23\1\33\1\17\1\34\1\35\1\5\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\72\0\1\5\1\57\3\5\1\60\2\5\1\61\2\5"+
    "\1\62\15\5\3\0\1\57\5\5\1\0\1\5\2\0"+
    "\1\5\22\0\13\5\1\63\15\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\31\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\10\5\1\64\5\5\1\65"+
    "\12\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\6\5\1\66\22\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\1\67\6\5\1\70\21\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\2\5\1\71\5\5"+
    "\1\72\20\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\4\5\1\73\7\5\1\74\14\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\7\5\1\75\3\5"+
    "\1\76\15\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\1\77\5\5\1\100\4\5\1\101\15\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\3\5\1\102"+
    "\10\5\1\103\4\5\1\104\7\5\3\0\5\5\1\104"+
    "\1\0\1\5\2\0\1\5\22\0\7\5\1\105\21\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\3\5"+
    "\1\106\2\5\1\107\3\5\1\110\1\111\4\5\1\112"+
    "\10\5\3\0\2\5\1\112\1\5\1\110\1\5\1\0"+
    "\1\5\2\0\1\5\22\0\1\113\1\5\1\114\3\5"+
    "\1\115\1\116\21\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\6\5\1\117\22\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\1\120\2\5\1\121\3\5"+
    "\1\122\3\5\1\123\15\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\7\5\1\124\21\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\1\125\12\5\1\126"+
    "\15\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\6\5\1\127\22\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\52\0\1\27\1\130\24\0\1\130\42\0\1\130"+
    "\74\0\1\131\33\0\45\132\1\133\1\134\22\132\46\0"+
    "\1\135\72\0\1\136\71\0\1\37\71\0\1\137\2\0"+
    "\1\140\67\0\1\140\1\141\70\0\1\142\14\0\1\5"+
    "\1\143\12\5\1\144\14\5\3\0\1\143\5\5\1\0"+
    "\1\5\2\0\1\5\22\0\15\5\1\145\13\5\3\0"+
    "\6\5\1\0\1\145\2\0\1\5\22\0\11\5\1\146"+
    "\17\5\3\0\3\5\1\146\2\5\1\0\1\5\2\0"+
    "\1\5\22\0\17\5\1\147\11\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\12\5\1\150\16\5\3\0"+
    "\4\5\1\150\1\5\1\0\1\5\2\0\1\5\22\0"+
    "\12\5\1\151\16\5\3\0\4\5\1\151\1\5\1\0"+
    "\1\5\2\0\1\5\22\0\3\5\1\152\25\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\10\5\1\153"+
    "\20\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\7\5\1\154\21\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\15\5\1\155\13\5\3\0\6\5\1\0"+
    "\1\155\2\0\1\5\22\0\11\5\1\156\17\5\3\0"+
    "\3\5\1\156\2\5\1\0\1\5\2\0\1\5\22\0"+
    "\12\5\1\157\16\5\3\0\4\5\1\157\1\5\1\0"+
    "\1\5\2\0\1\5\22\0\12\5\1\160\11\5\1\161"+
    "\4\5\3\0\4\5\1\160\1\5\1\0\1\5\2\0"+
    "\1\5\22\0\20\5\1\162\10\5\3\0\2\5\1\162"+
    "\3\5\1\0\1\5\2\0\1\5\22\0\12\5\1\163"+
    "\10\5\1\164\5\5\3\0\1\5\1\164\2\5\1\163"+
    "\1\5\1\0\1\5\2\0\1\5\22\0\4\5\1\165"+
    "\24\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\14\5\1\166\14\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\20\5\1\167\10\5\3\0\2\5\1\167"+
    "\3\5\1\0\1\5\2\0\1\5\22\0\13\5\1\170"+
    "\15\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\6\5\1\171\22\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\13\5\1\172\15\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\17\5\1\173\11\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\1\5\1\174"+
    "\27\5\3\0\1\174\5\5\1\0\1\5\2\0\1\5"+
    "\22\0\14\5\1\175\14\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\5\5\1\176\12\5\1\177\10\5"+
    "\3\0\2\5\1\177\3\5\1\0\1\5\2\0\1\5"+
    "\22\0\1\200\2\5\1\201\25\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\2\5\1\202\26\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\7\5\1\203"+
    "\21\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\5\5\1\204\23\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\14\5\1\205\14\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\12\5\1\206\16\5\3\0"+
    "\4\5\1\206\1\5\1\0\1\5\2\0\1\5\22\0"+
    "\14\5\1\207\6\5\1\210\3\5\1\211\1\5\3\0"+
    "\1\5\1\210\4\5\1\0\1\5\2\0\1\5\22\0"+
    "\10\5\1\212\20\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\10\5\1\213\20\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\2\5\1\214\26\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\13\5\1\215"+
    "\15\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\10\5\1\216\20\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\2\5\1\217\5\5\1\220\20\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\1\221\30\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\30\0\1\222"+
    "\21\0\1\130\70\0\1\223\2\0\1\224\4\0\1\225"+
    "\27\0\43\132\1\0\25\132\43\136\1\0\25\136\1\0"+
    "\2\5\1\226\26\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\3\5\1\227\25\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\13\5\1\230\15\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\26\5\1\231"+
    "\2\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\6\5\1\232\22\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\2\5\1\233\26\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\25\5\1\234\3\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\2\5\1\235"+
    "\26\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\6\5\1\236\22\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\7\5\1\237\21\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\6\5\1\240\22\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\6\5\1\241"+
    "\22\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\6\5\1\242\22\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\15\5\1\243\13\5\3\0\6\5\1\0"+
    "\1\243\2\0\1\5\22\0\6\5\1\244\22\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\1\245\30\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\6\5"+
    "\1\246\22\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\6\5\1\247\1\5\1\250\20\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\10\5\1\251\20\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\10\5"+
    "\1\252\20\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\10\5\1\253\20\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\12\5\1\254\16\5\3\0\4\5"+
    "\1\254\1\5\1\0\1\5\2\0\1\5\22\0\3\5"+
    "\1\255\25\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\15\5\1\256\13\5\3\0\6\5\1\0\1\256"+
    "\2\0\1\5\22\0\24\5\1\257\4\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\27\5\1\260\1\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\10\5"+
    "\1\261\20\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\15\5\1\262\13\5\3\0\6\5\1\0\1\262"+
    "\2\0\1\5\22\0\7\5\1\263\21\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\14\5\1\264\14\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\20\5"+
    "\1\265\10\5\3\0\2\5\1\265\3\5\1\0\1\5"+
    "\2\0\1\5\22\0\4\5\1\266\24\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\13\5\1\267\15\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\12\5"+
    "\1\270\16\5\3\0\4\5\1\270\1\5\1\0\1\5"+
    "\2\0\1\5\22\0\12\5\1\271\16\5\3\0\4\5"+
    "\1\271\1\5\1\0\1\5\2\0\1\5\22\0\14\5"+
    "\1\272\14\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\13\5\1\273\15\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\23\5\1\274\5\5\3\0\1\5"+
    "\1\274\4\5\1\0\1\5\2\0\1\5\22\0\6\5"+
    "\1\275\22\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\14\5\1\276\14\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\52\0\1\277\1\0\1\300\14\0\1\300"+
    "\51\0\1\223\4\0\1\301\1\302\1\303\61\0\1\304"+
    "\2\0\1\224\35\0\3\5\1\305\25\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\2\5\1\306\26\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\15\5"+
    "\1\307\13\5\3\0\6\5\1\0\1\307\2\0\1\5"+
    "\22\0\12\5\1\310\16\5\3\0\4\5\1\310\1\5"+
    "\1\0\1\5\2\0\1\5\22\0\17\5\1\311\11\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\6\5"+
    "\1\312\22\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\6\5\1\313\22\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\3\5\1\314\25\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\5\5\1\315\23\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\20\5"+
    "\1\316\10\5\3\0\2\5\1\316\3\5\1\0\1\5"+
    "\2\0\1\5\22\0\14\5\1\317\14\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\20\5\1\320\10\5"+
    "\3\0\2\5\1\320\3\5\1\0\1\5\2\0\1\5"+
    "\22\0\12\5\1\321\16\5\3\0\4\5\1\321\1\5"+
    "\1\0\1\5\2\0\1\5\22\0\15\5\1\322\13\5"+
    "\3\0\6\5\1\0\1\322\2\0\1\5\22\0\4\5"+
    "\1\323\24\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\11\5\1\324\17\5\3\0\3\5\1\324\2\5"+
    "\1\0\1\5\2\0\1\5\22\0\6\5\1\325\22\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\10\5"+
    "\1\326\20\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\12\5\1\327\16\5\3\0\4\5\1\327\1\5"+
    "\1\0\1\5\2\0\1\5\22\0\6\5\1\330\22\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\14\5"+
    "\1\331\14\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\13\5\1\332\15\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\1\333\12\5\1\334\15\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\21\5\1\335"+
    "\7\5\3\0\5\5\1\335\1\0\1\5\2\0\1\5"+
    "\22\0\12\5\1\336\16\5\3\0\4\5\1\336\1\5"+
    "\1\0\1\5\2\0\1\5\22\0\21\5\1\337\7\5"+
    "\3\0\5\5\1\337\1\0\1\5\2\0\1\5\22\0"+
    "\3\5\1\340\25\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\15\5\1\341\13\5\3\0\6\5\1\0"+
    "\1\341\2\0\1\5\22\0\1\342\30\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\15\5\1\343\13\5"+
    "\3\0\6\5\1\0\1\343\2\0\1\5\52\0\1\277"+
    "\70\0\1\344\2\0\1\224\4\0\1\225\60\0\1\345"+
    "\2\0\1\224\4\0\1\225\63\0\1\224\4\0\1\225"+
    "\27\0\31\346\1\304\5\346\1\347\2\346\1\350\1\0"+
    "\1\351\24\346\1\0\4\5\1\352\24\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\12\5\1\353\16\5"+
    "\3\0\4\5\1\353\1\5\1\0\1\5\2\0\1\5"+
    "\22\0\6\5\1\354\22\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\6\5\1\355\22\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\14\5\1\356\14\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\1\357"+
    "\30\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\16\5\1\360\12\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\6\5\1\361\22\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\5\5\1\362\23\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\3\5\1\363"+
    "\25\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\5\5\1\364\23\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\3\5\1\365\25\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\1\5\1\366\27\5\3\0"+
    "\1\366\5\5\1\0\1\5\2\0\1\5\22\0\6\5"+
    "\1\367\22\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\20\5\1\370\10\5\3\0\2\5\1\370\3\5"+
    "\1\0\1\5\2\0\1\5\22\0\17\5\1\371\11\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\14\5"+
    "\1\372\14\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\1\373\30\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\12\5\1\374\16\5\3\0\4\5\1\374"+
    "\1\5\1\0\1\5\2\0\1\5\22\0\2\5\1\375"+
    "\26\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\6\5\1\376\22\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\15\5\1\377\13\5\3\0\6\5\1\0"+
    "\1\377\2\0\1\5\22\0\1\5\1\u0100\27\5\3\0"+
    "\1\u0100\5\5\1\0\1\5\2\0\1\5\22\0\14\5"+
    "\1\u0101\14\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\52\0\1\344\5\0\1\302\1\303\61\0\1\345\6\0"+
    "\1\303\61\0\1\u0102\70\0\1\u0103\2\0\1\224\65\0"+
    "\1\u0104\2\0\1\224\65\0\1\u0102\2\0\1\224\35\0"+
    "\1\u0105\30\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\27\5\1\u0106\1\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\14\5\1\u0107\14\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\15\5\1\u0108\13\5"+
    "\3\0\6\5\1\0\1\u0108\2\0\1\5\22\0\10\5"+
    "\1\u0109\20\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\14\5\1\u010a\14\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\6\5\1\u010b\22\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\4\5\1\u010c\24\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\6\5"+
    "\1\u010d\22\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\7\5\1\u010e\21\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\1\u010f\30\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\11\5\1\u0110\17\5\3\0"+
    "\3\5\1\u0110\2\5\1\0\1\5\2\0\1\5\22\0"+
    "\5\5\1\u0111\23\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\2\5\1\u0112\1\u0113\25\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\3\5\1\u0114\25\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\14\5"+
    "\1\u0115\14\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\3\5\1\u0116\4\5\1\u0117\1\u0118\3\5\1\u0119"+
    "\13\5\3\0\3\5\1\u0118\2\5\1\0\1\u0119\2\0"+
    "\1\5\22\0\1\u011a\30\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\15\5\1\u011b\13\5\3\0\6\5"+
    "\1\0\1\u011b\2\0\1\5\22\0\2\5\1\u011c\26\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\23\5"+
    "\1\u011d\5\5\3\0\1\5\1\u011d\4\5\1\0\1\5"+
    "\2\0\1\5\52\0\1\u0102\12\0\1\u011e\24\0\31\346"+
    "\1\u0103\11\346\1\0\1\351\55\346\1\u0104\5\346\1\347"+
    "\3\346\1\0\1\351\24\346\1\0\5\5\1\u011f\23\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\12\5"+
    "\1\u0120\16\5\3\0\4\5\1\u0120\1\5\1\0\1\5"+
    "\2\0\1\5\22\0\26\5\1\u0121\2\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\14\5\1\u0122\14\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\14\5"+
    "\1\u0123\14\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\10\5\1\u0124\20\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\10\5\1\u0125\20\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\6\5\1\u0126\22\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\6\5"+
    "\1\u0127\22\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\12\5\1\u0128\16\5\3\0\4\5\1\u0128\1\5"+
    "\1\0\1\5\2\0\1\5\22\0\10\5\1\u0129\20\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\23\5"+
    "\1\u012a\5\5\3\0\1\5\1\u012a\4\5\1\0\1\5"+
    "\2\0\1\5\22\0\10\5\1\u012b\20\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\13\5\1\u012c\15\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\1\u012d"+
    "\30\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\12\5\1\u012e\16\5\3\0\4\5\1\u012e\1\5\1\0"+
    "\1\5\2\0\1\5\22\0\23\5\1\u012f\5\5\3\0"+
    "\1\5\1\u012f\4\5\1\0\1\5\2\0\1\5\55\0"+
    "\1\224\35\0\2\5\1\u0130\26\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\14\5\1\u0131\14\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\14\5\1\u0132"+
    "\14\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\10\5\1\u0133\20\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\6\5\1\u0134\22\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\17\5\1\u0135\11\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\12\5\1\u0136"+
    "\16\5\3\0\4\5\1\u0136\1\5\1\0\1\5\2\0"+
    "\1\5\22\0\20\5\1\u0137\10\5\3\0\2\5\1\u0137"+
    "\3\5\1\0\1\5\2\0\1\5\22\0\12\5\1\u0138"+
    "\16\5\3\0\4\5\1\u0138\1\5\1\0\1\5\2\0"+
    "\1\5\22\0\14\5\1\u0139\14\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\6\5\1\u013a\22\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\7\5\1\u013b"+
    "\21\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\17\5\1\u013c\11\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\20\5\1\u013d\10\5\3\0\2\5\1\u013d"+
    "\3\5\1\0\1\5\2\0\1\5\22\0\6\5\1\u013e"+
    "\22\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\6\5\1\u013f\22\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\6\5\1\u0140\22\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\3\5\1\u0141\25\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\13\5\1\u0142"+
    "\15\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\12\5\1\u0143\16\5\3\0\4\5\1\u0143\1\5\1\0"+
    "\1\5\2\0\1\5\22\0\17\5\1\u0144\11\5\3\0"+
    "\6\5\1\0\1\5\2\0\1\5\22\0\14\5\1\u0145"+
    "\14\5\3\0\6\5\1\0\1\5\2\0\1\5\22\0"+
    "\10\5\1\u0146\20\5\3\0\6\5\1\0\1\5\2\0"+
    "\1\5\22\0\10\5\1\u0147\20\5\3\0\6\5\1\0"+
    "\1\5\2\0\1\5\22\0\21\5\1\u0148\7\5\3\0"+
    "\5\5\1\u0148\1\0\1\5\2\0\1\5\22\0\6\5"+
    "\1\u0149\22\5\3\0\6\5\1\0\1\5\2\0\1\5"+
    "\22\0\3\5\1\u014a\25\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\17\5\1\u014b\11\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\11\5\1\u014c\17\5"+
    "\3\0\3\5\1\u014c\2\5\1\0\1\5\2\0\1\5"+
    "\22\0\14\5\1\u014d\14\5\3\0\6\5\1\0\1\5"+
    "\2\0\1\5\22\0\4\5\1\u014e\24\5\3\0\6\5"+
    "\1\0\1\5\2\0\1\5\22\0\6\5\1\u014f\22\5"+
    "\3\0\6\5\1\0\1\5\2\0\1\5\22\0\11\5"+
    "\1\u0150\17\5\3\0\3\5\1\u0150\2\5\1\0\1\5"+
    "\2\0\1\5\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14649];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\1\11\1\1\1\11\7\1\2\11"+
    "\1\1\11\11\52\1\2\0\1\11\1\0\1\11\1\1"+
    "\4\11\57\1\2\0\1\11\1\0\52\1\5\0\37\1"+
    "\6\0\30\1\3\0\31\1\1\0\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public String yylval;

	private int cptEnd = 0;
	
	public void set_yylval(String val){
    		yylval = val;
	}

	/** 
	 * Initialize the lexer 
	 */	
	public void initializeLex() {
		lineNumber = 1;
	}

	/** 
	  * Set token
	  *
	  * @param t The token to set
	  */
	public void setToken (int t){
		token = t;
	}

	/**
	  * Considers the special character '\' and return converted String
	  * A \" sequence is connverted to "
      *
	  * @param s The String to convert
	 */
	public String unescape (String s){
	    assert (s != null);
		int i;
        i = 0;
		StringBuilder result = new StringBuilder(s.length());
		while (i < s.length()) {
			if (s.charAt(i) == '\\' && i < s.length() - 1) {
				result.append (s.charAt(i+1));
				i = i + 1;
			}
			else {
				result.append (s.charAt(i));
			}
			i = i + 1;
		}
		return result.toString();
	}

	public String unquotedString (String s){
	    assert (s != null && s.length() >= 2 && s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"');
		return s.substring(1, s.length() - 1);
	}

	/**
	  * Number of scanned lines 
	  */
	public int lineNumber;

	/**
	  * Recognized terminal 
	  */
	public int token;

	/**
	  * Temp String for operations for operation on a String by a function of the scanner
	  */
	private String tmpStr;
	
	public void setFormulaString(String s) {
		try {
			this.zzReader = new StringReader(s);				
		} catch (Exception e) {
			Logger.getLogger(SlangLex.class.getName()).log(Level.SEVERE, null, e);
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SlangLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SlangLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 84: 
          { setToken (SlangTab.T_MULTIPLY);return token;
          }
        case 94: break;
        case 64: 
          { setToken (SlangTab.T_SUMV);return token;
          }
        case 95: break;
        case 54: 
          { setToken (SlangTab.T_JULY);return token;
          }
        case 96: break;
        case 85: 
          { setToken (SlangTab.T_SUBSTRING);return token;
          }
        case 97: break;
        case 74: 
          { setToken (SlangTab.T_MONTHS);return token;
          }
        case 98: break;
        case 56: 
          { set_yylval (yytext()); setToken (SlangTab.V_DURATION);
			//System.out.println("x_duration found");
			return token;
          }
        case 99: break;
        case 55: 
          { setToken (SlangTab.T_JUNE);return token;
          }
        case 100: break;
        case 44: 
          { setToken (SlangTab.T_DECEMBER);return token;
          }
        case 101: break;
        case 57: 
          { setToken (SlangTab.T_CEIL);return token;
          }
        case 102: break;
        case 42: 
          { setToken (SlangTab.T_NOT);return token;
          }
        case 103: break;
        case 27: 
          { setToken (SlangTab.T_IF);return token;
          }
        case 104: break;
        case 46: 
          { setToken (SlangTab.T_SUM);return token;
          }
        case 105: break;
        case 91: 
          { setToken (SlangTab.T_FORMATINTEGER);return token;
          }
        case 106: break;
        case 83: 
          { setToken (SlangTab.T_TIMESPAN);return token;
          }
        case 107: break;
        case 53: 
          { setToken (SlangTab.T_JANUARY);return token;
          }
        case 108: break;
        case 4: 
          { set_yylval (yytext()); setToken (SlangTab.V_INTEGER);
			//System.out.println("x_integer found");
			return token;
          }
        case 109: break;
        case 28: 
          { setToken (SlangTab.T_OR);return token;
          }
        case 110: break;
        case 3: 
          { setToken ('_');return token;
          }
        case 111: break;
        case 23: 
          { setToken(']');return token;
          }
        case 112: break;
        case 25: 
          { setToken('}');return token;
          }
        case 113: break;
        case 6: 
          { setToken ('+');return token;
          }
        case 114: break;
        case 7: 
          { setToken('\'');return token;
          }
        case 115: break;
        case 81: 
          { setToken (SlangTab.T_PUT_TEXT);return token;
          }
        case 116: break;
        case 58: 
          { setToken (SlangTab.T_ELSE);return token;
          }
        case 117: break;
        case 13: 
          { setToken ('>');return token;
          }
        case 118: break;
        case 82: 
          { setToken (SlangTab.T_DURATION);return token;
          }
        case 119: break;
        case 88: 
          { setToken (SlangTab.T_FORMATDATE);return token;
          }
        case 120: break;
        case 49: 
          { setToken (SlangTab.T_MARCH);return token;
          }
        case 121: break;
        case 37: 
          { setToken (SlangTab.T_ABS);return token;
          }
        case 122: break;
        case 34: 
          { setToken (SlangTab.T_SMALLER_EQ);return token;
          }
        case 123: break;
        case 87: 
          { setToken (SlangTab.T_STRINGITEM);return token;
          }
        case 124: break;
        case 21: 
          { setToken(')');return token;
          }
        case 125: break;
        case 86: 
          { setToken (SlangTab.T_APPLIC);return token;
          }
        case 126: break;
        case 50: 
          { setToken (SlangTab.T_MAY);return token;
          }
        case 127: break;
        case 71: 
          { setToken (SlangTab.T_YEARS);return token;
          }
        case 128: break;
        case 11: 
          { setToken('/');return token;
          }
        case 129: break;
        case 67: 
          { setToken (SlangTab.T_TRUNC);return token;
          }
        case 130: break;
        case 93: 
          { setToken (SlangTab.T_BANKERS_ROUNDED);return token;
          }
        case 131: break;
        case 33: 
          { setToken (SlangTab.T_DIFFERENT);return token;
          }
        case 132: break;
        case 76: 
          { setToken (SlangTab.T_BOOLEAN);return token;
          }
        case 133: break;
        case 80: 
          { setToken (SlangTab.T_MINUTES);return token;
          }
        case 134: break;
        case 15: 
          { setToken ('*');return token;
          }
        case 135: break;
        case 68: 
          { setToken (SlangTab.T_FALSE);return token;
          }
        case 136: break;
        case 89: 
          { setToken (SlangTab.T_STRINGLENGTH);return token;
          }
        case 137: break;
        case 62: 
          { setToken (SlangTab.T_THEN);return token;
          }
        case 138: break;
        case 65: 
          { setToken (SlangTab.T_SMAX);return token;
          }
        case 139: break;
        case 14: 
          { setToken ('=');return token;
          }
        case 140: break;
        case 43: 
          { setToken (SlangTab.T_NOVEMBER);return token;
          }
        case 141: break;
        case 69: 
          { setToken (SlangTab.T_FLOOR);return token;
          }
        case 142: break;
        case 24: 
          { setToken('{');return token;
          }
        case 143: break;
        case 79: 
          { setToken (SlangTab.T_FORMULA);return token;
          }
        case 144: break;
        case 20: 
          { setToken('(');return token;
          }
        case 145: break;
        case 60: 
          { setToken (SlangTab.T_DAYS);return token;
          }
        case 146: break;
        case 8: 
          { lineNumber = lineNumber + 1;
          }
        case 147: break;
        case 51: 
          { setToken (SlangTab.T_MAX);return token;
          }
        case 148: break;
        case 63: 
          { setToken (SlangTab.T_SIGN);return token;
          }
        case 149: break;
        case 2: 
          { set_yylval (yytext()); setToken (SlangTab.V_IDENT);
			//System.out.println("v_ident found "+yytext());
			return token;
          }
        case 150: break;
        case 73: 
          { setToken (SlangTab.T_STRING);return token;
          }
        case 151: break;
        case 45: 
          { setToken (SlangTab.T_SEPTEMBER);return token;
          }
        case 152: break;
        case 40: 
          { setToken (SlangTab.T_END);return token;
          }
        case 153: break;
        case 22: 
          { setToken('[');return token;
          }
        case 154: break;
        case 75: 
          { setToken (SlangTab.T_INTEGER);return token;
          }
        case 155: break;
        case 77: 
          { setToken (SlangTab.T_NUMERIC);return token;
          }
        case 156: break;
        case 32: 
          { setToken (SlangTab.T_INTEGER_DIV);return token;
          }
        case 157: break;
        case 17: 
          { setToken(':');return token;
          }
        case 158: break;
        case 12: 
          { setToken ('<');return token;
          }
        case 159: break;
        case 59: 
          { setToken (SlangTab.T_DATE);return token;
          }
        case 160: break;
        case 39: 
          { setToken (SlangTab.T_AUGUST);return token;
          }
        case 161: break;
        case 48: 
          { setToken (SlangTab.T_GET);return token;
          }
        case 162: break;
        case 47: 
          { setToken (SlangTab.T_FEBRUARY);return token;
          }
        case 163: break;
        case 19: 
          { setToken(SlangTab.T_SEP);return token;
          }
        case 164: break;
        case 10: 
          { break;
          }
        case 165: break;
        case 16: 
          { setToken ('.');return token;
          }
        case 166: break;
        case 26: 
          { setToken (SlangTab.T_IN);return token;
          }
        case 167: break;
        case 90: 
          { setToken (SlangTab.T_FORMATSTRING);return token;
          }
        case 168: break;
        case 66: 
          { setToken (SlangTab.T_SMIN);return token;
          }
        case 169: break;
        case 31: 
          { setToken (SlangTab.T_MODULO);return token;
          }
        case 170: break;
        case 5: 
          { setToken(',');return token;
          }
        case 171: break;
        case 1: 
          { setToken (SlangTab.T_UNKNOWN);
			//System.out.println(". found");
			return token;
          }
        case 172: break;
        case 78: 
          { setToken (SlangTab.T_ROUNDED);return token;
          }
        case 173: break;
        case 41: 
          { setToken (SlangTab.T_OCTOBER);return token;
          }
        case 174: break;
        case 18: 
          { setToken('?');return token;
          }
        case 175: break;
        case 52: 
          { setToken (SlangTab.T_MIN);return token;
          }
        case 176: break;
        case 61: 
          { setToken (SlangTab.T_TRUE);return token;
          }
        case 177: break;
        case 72: 
          { setToken (SlangTab.T_ELSEIF);return token;
          }
        case 178: break;
        case 9: 
          { setToken ('-');return token;
          }
        case 179: break;
        case 38: 
          { setToken (SlangTab.T_AND);return token;
          }
        case 180: break;
        case 36: 
          { setToken (SlangTab.T_APRIL);return token;
          }
        case 181: break;
        case 29: 
          { tmpStr = yytext();
				tmpStr = tmpStr.replace(',', '.');
				set_yylval (tmpStr);
				setToken (SlangTab.V_QUANTITY);
				//System.out.println("x_quantity found");
				return token;
          }
        case 182: break;
        case 30: 
          { //System.out.println("x_string found ");
			//System.out.println(unescape (unquotedString (yytext())));
			set_yylval (unescape (unquotedString (yytext())));
			setToken (SlangTab.V_STRING);
			Matcher matcher = Pattern.compile(Pattern.quote("\n")).matcher(yytext());
	        int occur = 0;
	        while (matcher.find()) {
	            occur++;
	        }
	        lineNumber = lineNumber + occur;
			//System.out.println("----------------------------- NUMERO DE LIGNE LUE (String): "+lineNumber);
			return token;
          }
        case 183: break;
        case 70: 
          { setToken (SlangTab.T_HOURS);return token;
          }
        case 184: break;
        case 92: 
          { setToken (SlangTab.T_FORMATNUMERIC);return token;
          }
        case 185: break;
        case 35: 
          { setToken (SlangTab.T_GREATER_EQ);return token;
          }
        case 186: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                if(cptEnd==0){
				//System.out.println("eof found");
				setToken(SlangTab.T_EOF);
				cptEnd++;
				return token;
			}else {
				setToken(0);
				return token;
			}
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
